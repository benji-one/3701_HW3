devtools::use_vignette("prob7-vignette")
devtools::use_vignette("ggwrapper-vignette")
ggplot2.wrapper <- function(x,MARGIN)
{
if(MARGIN==1) {ggplot(housing,aes(x=Date,y=Home.Value, color=State))+ geom_point()}
if(MARGIN==2) {ggplot(housing,aes(x=Date,y=Structure.Cost, color=State))+ geom_point()}
if(MARGIN==3) {ggplot(housing,aes(x=Date,y=Land.Value, color=State))+ geom_point()}
}
getwd()
devtools:load_all
devtools::load_all
devtools::install()
devtools::install()
devtools::build()
devtools::use_package("ggplot2")
devtools::load_all
devtools::description()
devtools::descriptio
devtools::description
devtools::build()
foo <- readHTMLTable("http://www.stat.umn.edu/geyer/3701/data/big10.html")
library(XML)
library(XML)
install.packages("XML")
library(XML)
foo <- readHTMLTable("http://www.stat.umn.edu/geyer/3701/data/big10.html")
foo
foo%'Conference Standings'
foo$`Conference Standings`
foo[1]
foo[2]
foo[1][1,]
foo[1,2
foo[1,2]
foo[1,2]
foo[1]
foo[[1]
foo[[1]]
foo[[1]]
foo[[1]][1,2]
foo[[1]][1,]
is.character(foo[[1]][,2])
foo[[1]][,2]
foo[[1]][,3]
is.character(foo[[1]][,3])
is.character(foo[[1]][,2])
is.numeric(foo[[1]][,2])
is.numeric(foo[[1]][,3])
foo[[1]][,3]
typeof(foo)
foo[[1]][,1]
is.numeric(foo[[1]][,1])
typeof(foo[[1]][,1])
sum(foo[[1]][,1])
as.numeric(foo[[1]][,1])
sum(foo[[1]][,1])
sum(as.numeric(foo[[1]][1,]))
sum(as.numeric(foo[[1]][2,]))
foo[[1]][,3]
foo[[1]][,2]
as.numeric(foo[[1]][2,])
typeof(foo[[1]][,2])
?typeof
foo <- readHTMLTable("http://www.stat.umn.edu/geyer/3701/data/big10.html")
typeof(foo[[1]][,2])
typeof(foo[[1]][2,2])
foo[[1]][2,2]
foo[[1]][[2,2]]
typeof(foo[[1]][[2,2]])
typeof(foo[[1]][[3,3]])
typeof(foo[[1]][[[2,2]]])
test <- foo[[1]][,2]
test
typeof(test)
test[1]
typeof(test[1])
typeof(test[[1]])
test[[1]]
foo
sum(test)
sum(as.numeric(test))
levels(foo[1])
levels(foo)
foo[[1]]
foo1 <- foo[[1]]
foo1
foo1[1,]
foo1[2,]
typeof(foo1)
typeof(foo1[,1])
typeof(foo1[,2])
foo1[,2]
foo1[,1]
levels(foo1)
levels(foo1)[foo1]
levels(foo1)[1]
levels(foo1[,1]
levels(foo1[,1])
levels(foo1[,1])
is.numeric(levels(foo1[,1]))
is.numeric(levels(foo1[,2]))
levels(foo1[,2])
foo1
as.numeric(levels(foo1[,2]))
as.numeric(levels(foo1[,1]))
is.na(as.numeric(levels(foo1[,2])))
newfoo1 <- as.numeric(levels(foo[,-2]))
foo[,-2]
foo[,2]
foo2[,-2]
foo1[,-2]
newfoo1 <- as.numeric(levels(foo1[,-2]))
newfoo1
foo1
foo1[,1]
levels(foo[,1])
levels(foo1[,1])
as.numeric(levels(foo1[,1]))
foo1.numeric <- as.numeric(levels(foo1[,1]))
sum(foo1.numeric)
newfoo1 <- foo1
newfoo1[,-2] <- as.numeric(levels(foo1[,-2]))
levels(foo1)
levels(foo1[,-2])
levels(foo1[,2])
levels(foo1[,1])
foo1
levels(foo1[,2])
levels(foo1[,-2])
for(i in 1:length(foo1[1,]))
{
if(i ==2)
{
foo1[,i] <- foo1[,i]
}
foo1[,i] <- as.numeric(levels(foo1[,i]))
}
View(foo1)
sum(foo1[,1])
?next
foo1 <- newfoo1
for(i in 1:length(foo1[1,]))
{
if(i ==2) next
foo1[,i] <- as.numeric(levels(foo1[,i]))
}
foo1
foo1[,2]
foo1[,1]
foo1
foo
foo[[2]]
foo[[2]][,1]
foo <- readHTMLTable("http://www.stat.umn.edu/geyer/3701/data/big10.html")
foo1 <- foo[[1]]
foo2 <- foo[[2]]
for(i in 1:length(foo1[1,]))
{
if(i ==2) next
foo1[,i] <- as.numeric(levels(foo1[,i]))
}
for(j in 2:length(foo2[1,]))
{
foo2[,j] <- as.numeric(levels(foo2[,k=j]))
}
foo <- readHTMLTable("http://www.stat.umn.edu/geyer/3701/data/big10.html")
foo1 <- foo[[1]]
foo2 <- foo[[2]]
for(i in 1:length(foo1[1,]))
{
if(i ==2) next
foo1[,i] <- as.numeric(levels(foo1[,i]))
}
for(j in 2:length(foo2[1,]))
{
foo2[,j] <- as.numeric(levels(foo2[,j]))
}
foo1
foo2
(foo1[,5]*3)+(foo1[,7]*1)+(foo[,8]*1)
(foo1[,5]*3)+(foo1[,7]*1)+(foo1[,8]*1)
foo1[,5]
foo1[,5]*3
foo1[,7]*3
foo1[,7]
foo1
foo1[,2]
foo1[,3]
foo1[,4]
foo1[,5]
foo1[,6]
foo1[1,]
length(foo1)
foo <- readHTMLTable("http://www.stat.umn.edu/geyer/3701/data/big10.html")
foo1 <- foo[[1]]
foo2 <- foo[[2]]
for(i in 1:length(foo1[1,]))
{
if(i ==2) next
foo1[,i] <- as.numeric(levels(foo1[,i]))
}
for(j in 2:length(foo2[1,]))
{
foo2[,j] <- as.numeric(levels(foo2[,j]))
}
foo1[,5]
foo1[,6]
foo1[,2]
foo1[,7]
foo1[,8]
rm(list=ls())
foo <- readHTMLTable("http://www.stat.umn.edu/geyer/3701/data/big10.html")
## Question 1
#A)
foo1 <- foo[[1]]
foo2 <- foo[[2]]
for(i in 1:length(foo1[1,]))
{
if(i ==2) next
foo1[,i] <- as.numeric(levels(foo1[,i]))
}
for(j in 2:length(foo2[1,]))
{
foo2[,j] <- as.numeric(levels(foo2[,j]))
}
foo1[,7]
rm(list=ls())
foo <- readHTMLTable("http://www.stat.umn.edu/geyer/3701/data/big10.html")
## Question 1
#A)
foo1 <- foo[[1]]
foo2 <- foo[[2]]
for(i in 1:length(foo1[1,]))
{
if(i ==2) next
foo1[,i] <- as.numeric(levels(foo1[,i]))
}
for(j in 2:length(foo2[1,]))
{
foo2[,j] <- as.numeric(levels(foo2[,j]))
}
foo1[,6]
rm(list=ls())
foo <- readHTMLTable("http://www.stat.umn.edu/geyer/3701/data/big10.html")
## Question 1
#A)
foo1 <- foo[[1]]
foo2 <- foo[[2]]
for(i in 1:length(foo1[1,]))
{
foo1[,i] <- as.numeric(levels(foo1[,i]))
}
for(j in 2:length(foo2[1,]))
{
foo2[,j] <- as.numeric(levels(foo2[,j]))
}
foo1[,6]
foo1
foo2
foo2[,2]
foo2[,7]
foo2[,8]
foo2[,8]
foo2[,6]
foo2[,5]
foo2[,4]
foo2[,3]
foo2[,1]
foo2[,2]
foo2[,3]
foo2[,4]
rm(list=ls())
foo <- readHTMLTable("http://www.stat.umn.edu/geyer/3701/data/big10.html")
## Question 1
#A)
foo1 <- foo[[1]]
foo2 <- foo[[2]]
for(i in 1:10)
{
if(i ==2) next
foo1[,i] <- as.numeric(levels(foo1[,i]))
}
for(j in 2:7)
{
foo2[,j] <- as.numeric(levels(foo2[,j]))
}
foo1[2]
foo1[,2]
foo1[,1]
foo1[,3]
foo1[,4]
foo1[,5]
foo1[,6]
foo2[,6]
foo2[,3]
foo2[,4]
foo2[,6]
foo2[,5]
foo2[,4]
foo2[,3]
1:10
for (k in 1:100)
print(k)
for (i in 1:10) print(i)
foo <- readHTMLTable("http://www.stat.umn.edu/geyer/3701/data/big10.html")
## Question 1
#A)
foo1 <- foo[[1]]
foo2 <- foo[[2]]
for(i in 1:10)
{
if(i ==2) next
foo1[,i] <- as.numeric(levels(foo1[,i]))
}
foo1[,7] <- as.numeric(levels(foo1[,7]))
levels(foo[,4])
levels(foo1[,4])
levels(foo1[,5])
levels(foo1[,6])
levels(foo1[,7])
foo1
foo
rm(list=ls())
foo <- readHTMLTable("http://www.stat.umn.edu/geyer/3701/data/big10.html")
## Question 1
#A)
foo1 <- foo[[1]]
foo2 <- foo[[2]]
foo1[,1]
foo1[,2]
as.numeric(foo[,1])
as.numeric(foo1[,1])
as.numeric(foo1[,3])
as.numeric(foo1[,3])
as.numeric(foo1[,4])
as.numeric(foo1[,5])
foo1
foo[,5]
foo1[,5]
levels(foo1[,5])
foo1[,2]
levels(foo1)
levels(foo1[,2])
levels(foo[,6])
levels(foo1[,6])
levels(foo1[,6])[foo1[,6]]
rm(list=ls())
foo <- readHTMLTable("http://www.stat.umn.edu/geyer/3701/data/big10.html")
## Question 1
#A)
foo1 <- foo[[1]]
foo2 <- foo[[2]]
for(i in 1:10)
{
if(i ==2) next
foo1[,i] <- as.numeric(levels(foo1[,i])[foo1[,i]])
}
for(j in 2:7)
{
foo2[,j] <- as.numeric(levels(foo2[,j])[foo2[,j]])
}
foo1[,7]
foo1
(foo1[,5]*3)+(foo1[,7]*1)+(foo1[,8]*1)
foo1[,3]==(foo1[,5]*3)+(foo1[,7]*1)+(foo1[,8]*1)
foo2
test <- c(1,2,3)
names(test) <- "Header"
test
test <- c(1,2,3)
rownames(test) <- "Header"
test
calnames(test) <- "Header"
colnames(test) <- "Header"
foo2
(foo[,3]*3)+(foo[,5]*1)
(foo2[,3]*3)+(foo2[,5]*1)
foo3 <- foo2
cbind(foo3,(foo2[,3]*3)+(foo2[,5]*1))
Pts <- (foo2[,3]*3)+(foo2[,5]*1)
cbind(foo2,Pts)
PtsAdj <- Pts/foo2[,2]
cbind(foo2,PtsAdj)
PtsAdj <- round(Pts/foo2[,2], digits=1)
cbind(foo2,PtsAdj)
foo1[,-2]
foo <- read.csv("http://www.stat.umn.edu/geyer/3701/data/q4p2.csv", stringsAsFactors = FALSE)
foo
gout2 <- glm(y ~ color + state + speed, data = foo, family = binomial)
summary(gout2)
foo <- read.csv("http://www.stat.umn.edu/geyer/3701/data/q4p3.csv")
plot(x, y)
lines(x, mu.true)
aout <- gam(y ~ s(x, bs="cr"))
summary(aout)
foo
foo[1]
foo[2]
x <- foo[1]
y <- foo[2]
plot(x, y)
lines(x, mu.true)
aout <- gam(y ~ s(x, bs="cr"))
summary(aout)
library("mgcv")
x <- foo[1]
y <- foo[2]
plot(x, y)
lines(x, mu.true)
aout <- gam(y ~ s(x, bs="cr"))
summary(aout)
x <- foo[1]
y <- foo[2]
aout <- gam(y ~ x)
summary(aout)
typeof(y)
as.numeric(y)
y[1]
y[[1]]
typeof(y[[1]])
foo[[1]]
x <- foo[[1]]
y <- foo[[2]]
aout <- gam(y~x)
summary(aout)
plot(x,y)
curve(predict(aout, newdata = data.frame(x = x), type = "response"),
add = TRUE, col = "darkseagreen")
aout <- gam(y~s(x, bs="cr"))
curve(predict(aout, newdata = data.frame(x = x), type = "response"),
add = TRUE, col = "darkseagreen")
plot(x,y)
lines(x)
x <- foo[[1]]
y <- foo[[2]]
aout <- gam(y~x)
summary(aout)
plot(x,y)
abline(lm(y~x))
fred <- function(x)
{
foo <- predict(aout, newdata = data.frame(x = x),
type = "response", se.fit = TRUE)
crit <- qnorm((1 + conf.level) / 2)
foo$fit + crit * foo$se.fit
}
curve(fred, lty = "dashed", add = TRUE)
fred <- function(x)
{
foo <- predict(aout, newdata = data.frame(x = x),
type = "response", se.fit = TRUE)
crit <- qnorm((1 + conf.level) / 2)
foo$fit - crit * foo$se.fit
}
curve(fred, lty = "dashed", add = TRUE)
conf.level <- 0.95
fred <- function(x)
{
foo <- predict(aout, newdata = data.frame(x = x),
type = "response", se.fit = TRUE)
crit <- qnorm((1 + conf.level) / 2)
foo$fit + crit * foo$se.fit
}
curve(fred, lty = "dashed", add = TRUE)
fred <- function(x)
{
foo <- predict(aout, newdata = data.frame(x = x),
type = "response", se.fit = TRUE)
crit <- qnorm((1 + conf.level) / 2)
foo$fit - crit * foo$se.fit
}
curve(fred, lty = "dashed", add = TRUE)
foo
mean(y)
fred <- function(x)
{
foo <- predict(aout, newdata = data.frame(x = x),
type = "response", se.fit = TRUE)
crit <- qnorm((1 + conf.level) / 2)
foo$fit - crit * foo$se.fit
test <- foo$fit - crit * foo$se.fit
print(test[21])
}
curve(fred, lty = "dashed", add = TRUE)
foo <- predict(aout, newdata = data.frame(x = x),
type = "response", se.fit = TRUE)
crit <- qnorm((1 + conf.level) / 2)
foo$fit - crit * foo$se.fit
test <- foo$fit - crit * foo$se.fit
print(test[21])
foo <- predict(aout, newdata = data.frame(x = x),
type = "response", se.fit = TRUE)
crit <- qnorm((1 + conf.level) / 2)
test <- foo$fit - crit * foo$se.fit
print(test[21])
test[[21]]
conds <- c(0,20,40,60,80,100)
upper.cond <- c(upper[[1]],upper[[21]],upper[[41]],upper[[61]],upper[[81]],upper[[101]])
lower.cond <- c(lower[[1]],lower[[21]],lower[[41]],lower[[61]],lower[[81]],lower[[101]])
cbind(conds,lower.cond,upper.cond)
foo <- predict(aout, newdata = data.frame(x = x),
type = "response", se.fit = TRUE)
crit <- qnorm((1 + conf.level) / 2)
lower <- foo$fit - crit * foo$se.fit
upper <- foo$fit + crit * foo$se.fit
conds <- c(0,20,40,60,80,100)
upper.cond <- c(upper[[1]],upper[[21]],upper[[41]],upper[[61]],upper[[81]],upper[[101]])
lower.cond <- c(lower[[1]],lower[[21]],lower[[41]],lower[[61]],lower[[81]],lower[[101]])
cbind(conds,lower.cond,upper.cond)
rm(list=ls())
getwd()
getwd()
